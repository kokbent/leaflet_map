simul4.n1<-rbinom(500,N4,P4)
simul4.n2<-rbinom(500,N4,P4)
mark4.rate<-simul4.n1/N4
simul4.m2<-rbinom(500,simul4.n2,mark4.rate)
# Estimate abundance with LP model & Chap modification
LP.sim4.out<-LP(simul4.n1,simul4.n2,simul4.m2)
LP.sim4.out
chap.sim4.out<-chap(simul4.n1,simul4.n2,m2=simul4.m2)
chap.sim4.out
# Remove "Inf" values
LP.sim4.out[is.infinite(LP.sim4.out)]=NA
chap.sim4.out[is.infinite(chap.sim4.out)]=NA
# Mean and SD (LP & Chap)
LP.sim4.out.mean<-mean(LP.sim4.out, na.rm=TRUE)
LP.sim4.out.mean
LP.sim4.out.sd<-sd(LP.sim4.out, na.rm=TRUE)
LP.sim4.out.sd
chap.sim4.out.mean<-mean(chap.sim4.out, na.rm=TRUE)
chap.sim4.out.mean
chap.sim4.out.rm.sd<-sd(chap.sim4.out, na.rm=TRUE)
chap.sim4.out.rm.sd
#Question 2
N=1000
p2=0.4
#Tag retention=1,0.3,0.7
tag1_retention=1
#Number of individuals available for capture at t1
tr1.n1=N*p2
tr1.n1
#Number of individuals available for recapture
tr1.na=tr1.n1*tag1_retention
tr1.na
# Number of individual availabe for capture at t2
tr1.n2=N*p2
tr1.n2
# Number of available recaptures
tr1.m2=tr1.na*p2
tr1.m2
# N, Var, CI
tr1.N_hat=chap(n1=tr1.n1,n2=tr1.n2,m2=tr1.m2)
tr1.N_hat
tr1.var=var_chap(n1=tr1.n1,n2=tr1.n2,m2=tr1.m2)
tr1.var
tr1.ci=CI.est(N=tr1.N_hat,v_N=tr1.var)
tr1.ci
tag1_retention=0.3
#Number of individuals available for capture at t1
tr1.n1=N*p2
tr1.n1
#Number of individuals available for recapture
tr1.na=tr1.n1*tag1_retention
tr1.na
# Number of individual availabe for capture at t2
tr1.n2=N*p2
tr1.n2
# Number of available recaptures
tr1.m2=tr1.na*p2
tr1.m2
# N, Var, CI
tr1.N_hat=chap(n1=tr1.n1,n2=tr1.n2,m2=tr1.m2)
tr1.N_hat
tr1.var=var_chap(n1=tr1.n1,n2=tr1.n2,m2=tr1.m2)
tr1.var
tr1.ci=CI.est(N=tr1.N_hat,v_N=tr1.var)
tr1.ci
tag1_retention=0.7
#Number of individuals available for capture at t1
tr1.n1=N*p2
tr1.n1
#Number of individuals available for recapture
tr1.na=tr1.n1*tag1_retention
tr1.na
# Number of individual availabe for capture at t2
tr1.n2=N*p2
tr1.n2
# Number of available recaptures
tr1.m2=tr1.na*p2
tr1.m2
# N, Var, CI
tr1.N_hat=chap(n1=tr1.n1,n2=tr1.n2,m2=tr1.m2)
tr1.N_hat
tr1.var=var_chap(n1=tr1.n1,n2=tr1.n2,m2=tr1.m2)
tr1.var
tr1.ci=CI.est(N=tr1.N_hat,v_N=tr1.var)
tr1.ci
#Immigration=0,50
imm=0
# Number of individuals available for capture at t1
imm.n1=N*p2
imm.n1
# Number of individuals available for recapture
imm.na=imm.n1
imm.na
# Number of indivuals available for capture at t2
imm.n2=(N+imm)*p2
imm.n2
# Number of available recaptures
imm.m2=imm.na*p2
# N, Var, CI
imm.N_hat=chap(n1=imm.n1,n2=imm.n2,m2=imm.m2)
imm.N_hat
imm.var=var_chap(n1=imm.n1,n2=imm.n2,m2=imm.m2)
imm.var
imm.ci=CI.est(N=imm.N_hat,v_N=imm.var)
imm.ci
imm=50
# Number of individuals available for capture at t1
imm.n1=N*p2
imm.n1
# Number of individuals available for recapture
imm.na=imm.n1
imm.na
# Number of indivuals available for capture at t2
imm.n2=(N+imm)*p2
imm.n2
# Number of available recaptures
imm.m2=imm.na*p2
# N, Var, CI
imm.N_hat=chap(n1=imm.n1,n2=imm.n2,m2=imm.m2)
imm.N_hat
imm.var=var_chap(n1=imm.n1,n2=imm.n2,m2=imm.m2)
imm.var
imm.ci=CI.est(N=imm.N_hat,v_N=imm.var)
imm.ci
#BONUS
#How is your estimate biased when you have an emigration rate of 0.3, tag retention of 0.9, 30 new births and 25 individuals that immigrated?
n1<-1000*0.4 ##p
n2<-((1000+55)*0.7)*0.4 ##N+births&immigrants times 1-emigration rate all times survival
m2<-n1*0.7*0.9*0.4 ##original pop size*1-emigration rate*tag retention*detection prob
(N_hat=chap(n1=n1,n2=n2,m2=m2))
(var=var_chap(n1=n1,n2=n2,m2=m2))
CI.est(N=N_hat,v_N=var)
tag1_retention=0.3
#Number of individuals available for capture at t1
tr1.n1=N*p2
tr1.n1
#Number of individuals available for recapture
tr1.na=tr1.n1*tag1_retention
tr1.na
# Number of individual availabe for capture at t2
tr1.n2=N*p2
tr1.n2
# Number of available recaptures
tr1.m2=tr1.na*p2
tr1.m2
# N, Var, CI
tr1.N_hat=chap(n1=tr1.n1,n2=tr1.n2,m2=tr1.m2)
tr1.N_hat
tr1.var=var_chap(n1=tr1.n1,n2=tr1.n2,m2=tr1.m2)
tr1.var
tr1.ci=CI.est(N=tr1.N_hat,v_N=tr1.var)
tr1.ci
install.packages("marked")
demo()
install.packages("C:/Users/billpine/Downloads/CRHA Files.zip", repos = NULL, type = "win.binary")
install.packages("cm")
install.packages("mra")
?mra
library("mra", lib.loc="~/R/win-library/3.3")
data("dipper.data")
View(dipper.data)
data("dipper.histories")
View(dipper.histories)
dim(dipper.histories)
ct<-as.factor( paste("T",1:ncol(dipperhistorids),sep=""))
ct<-as.factor( paste("T",1:ncol(dipperhistories),sep=""))
ct<-as.factor( paste("T",1:ncol(dipper.histories),sep=""))
ct
?attr
attr(,"nan")<-nrow(dipper.histories)
attr(ct,"nan")<-nrow(dipper.histories)
ct
dipper1.cjs <- F.cjs.estim( ~tvar(ct,drop=c(1,2)), ~tvar(ct,drop=c(1,6,7)), dipper.histories )
dipper1.cjs
plot(dipper1.cjs)
plot(dipper1.cjs,type="s",ci=FALSE)
plot(dipper1.cjs,type="s",ci=TRUE)
plot(dipper1.cjs,type="s",ci=TRUE)
plot(dipper1.cjs)
plot(dipper1.cjs,type="s",ci=TRUE)
plot(dipper1.cjs,type="b",ci=TRUE)
plot(dipper1.cjs,type="b",ci=TRUE)
plot(dipper1.cjs)
plot(dipper1.cjs,type="b",ci=TRUE)
plot(dipper1.cjs,type="s",ci=TRUE)
help(F.cjs.estim)
library("marked", lib.loc="~/R/win-library/3.3")
detach("package:Matrix", unload=TRUE)
library("Matrix", lib.loc="C:/Program Files/R/R-3.3.2/library")
detach("package:marked", unload=TRUE)
library("marked", lib.loc="~/R/win-library/3.3")
?version
R.version
install.packages("installr")
install.packages("marked")
library("marked", lib.loc="~/R/win-library/3.4")
demo()
library(marked)
library(ggplot2)
data(dipper)
model=crm(dipper)
View(dipper)
dipper.proc=process.data(dipper)
dipper.ddl=make.design.data(dipper.proc)
fit.models=function()
{
Phi.sex=list(formula=~sex)
Phi.time=list(formula=~time)
p.sex=list(formula=~sex)
p.dot=list(formula=~1)
cml=create.model.list(c("Phi","p"))
results=crm.wrapper(cml,data=dipper.proc, ddl=dipper.ddl,
external=FALSE,accumulate=FALSE)
results
dipper.proc=process.data(dipper)
dipper.ddl=make.design.data(dipper.proc)
fit.models=function()
{
Phi.sex=list(formula=~sex)
Phi.time=list(formula=~time)
p.sex=list(formula=~sex)
p.dot=list(formula=~1)
cml=create.model.list(c("Phi","p"))
results=crm.wrapper(cml,data=dipper.proc, ddl=dipper.ddl,
external=FALSE,accumulate=FALSE)
return(results)
}
dipper.models=fit.models()
dipper.models
install.packages("fishmethods")
demo(package=marked)
library("marked", lib.loc="~/R/win-library/3.4")
demo(package=marked)
demo()
demo(tests,package=marked)
demo(tests,package="marked")
mod=crm(dipper,model="CJS",model.parameters=list(Phi=list(formula=~time),p=list(formula=~time)))
mod
dipper.models=fit.models()
dipper.models
dipper.models[[1]]
dipper.models[[1]]
mod
data(dipper)
dipper.proc=process.data(dipper,model="cjs",begin.time=1)
dipper.ddl=make.design.data(dipper.proc)
mod.Phisex.pdot=crm(dipper.proc,dipper.ddl,
model.parameters=list(Phi=list(formula=~sex+time),p=list(formula=~1)),hessian=TRUE)
xx=compute.real(mod.Phisex.pdot,"Phi",unique=TRUE,vcv=TRUE)
xx
real.mod=compute.real(mod,"Phi",unique=TRUE,vcv=TRUE)
real.mod
library(ggplot2)
install.packages("ggplot2")
library(marked)
library(ggplot2)
data(dipper)
model=crm(dipper)
mod=crm(dipper,model="CJS",model.parameters=list(Phi=list(formula=~time),p=list(formula=~time)))
real.mod=compute.real(mod,"Phi",unique=TRUE,vcv=TRUE)
dipper.proc=process.data(dipper)
real.mod
data(dipper)
View(dipper)
data(dipper)
model=crm(dipper)
real.model=compute.real(model,"Phi",unique=TRUE,vcv=TRUE)
real.model
real.model=compute.real(model,"Phi",se=TRUE,unique=TRUE,vcv=TRUE)
real.model
model=crm(dipper)
real.model=compute.real(model,"p",se=TRUE,unique=TRUE,vcv=TRUE)
real.model
mod=crm(dipper,model="CJS",model.parameters=list(Phi=list(formula=~time),p=list(formula=~time)))
#return real estimates
real.mod=compute.real(mod,"Phi",unique=TRUE,vcv=TRUE)
real.mod
#return real estimates
real.mod=compute.real(mod,"Phi",se=TRUE,unique=TRUE,vcv=TRUE)
real.mod
real.mod=compute.real(mod,"Phi",se=TRUE,unique=FALSE,vcv=TRUE)
real.mod
real.model=compute.real(model,"Phi",unique=TRUE,vcv=TRUE, se=TRUE)
real.model
real.mod=compute.real(mod,"Phi",unique=FALSE,vcv=TRUE, se=TRUE)
real.mod
mod=crm(dipper,model="CJS",model.parameters=list(Phi=list(formula=~time),p=list(formula=~time)))
real.mod=compute.real(mod,"Phi",unique=FALSE,vcv=TRUE, se=FALSE)
real.mod
mod=crm(dipper,model="CJS",model.parameters=list(Phi=list(formula=~time),p=list(formula=~time)))
real.mod=compute.real(mod,"Phi",unique=FALSE,vcv=TRUE, se=FALSE)
real.mod
mod=crm(dipper,model="CJS",model.parameters=list(Phi=list(formula=~time),p=list(formula=~time)))
#return real estimates
real.mod=compute.real(mod,"Phi",unique=FALSE,vcv=FALSE, se=TRUE)
real.mod
real.mod
####compute real
data(dipper)
dipper.proc=process.data(dipper,model="cjs",begin.time=1)
dipper.ddl=make.design.data(dipper.proc)
mod.Phisex.pdot=crm(dipper.proc,dipper.ddl,
model.parameters=list(Phi=list(formula=~sex+time),p=list(formula=~1)),hessian=TRUE)
xx=compute.real(mod.Phisex.pdot,"Phi",unique=TRUE,vcv=TRUE)
xx
mod=crm(dipper,model="CJS",model.parameters=list(Phi=list(formula=~time),p=list(formula=~time)),hessian=TRUE)
real.mod=compute.real(mod,"Phi",vcv=FALSE, se=TRUE)
real.mod
model=crm((dipper),hessian=TRUE)
real.model=compute.real(model,"Phi",unique=TRUE,vcv=TRUE, se=TRUE)
real.model
install.packages("plotrix")
library (plotrix)
year<-c(1:6)##I create my x axis
mean_mod1<-c(10.4, 14.1, 18.0,10.4, 14.1, 18.0) #these are my mean values, I've just typed them in
upper_mod1<-c(12.4, 16.1, 20.0,12.4, 16.1, 34.0) #these are my upper CI, I've just typed them in
lower_mod1<-c(8.4, 12.1,16.0,8.4, 12.1,3.0) #these are my lower CI, I've just typed them in
#you will need to adjust your y limits so they make sense
plotCI(year,mean_mod1,ui=upper_mod1,li=lower_mod1, ylim=c(0,35))
setwd("F:/oyster glm")
library(MASS)
library(coefplot)
# Modeling grid density
grid=read.csv("Grid_data_Nov_2012_bp.csv")
head(grid)
str(grid)
names(grid)
quadrat=subset(grid,Count!="NA")
#note working with counts of live and dead now, that's ok for now just add  & Live_Dead!="D" to only have live
# Aggregate data to count of oysters per quadrat, unique quadrat is identified by the Dis_Alng & Dis_frm location
#if there are lengths associated then there is a 1 for the count and then the length. After a certain number
#of lengths are measured then the number becomes the remaining count, so sum of each unique quadrat is the
#count per quadrat
dat=aggregate(Count~Date+Month+Trip+Locality+Site+Bar+Station+Dist_Alng+Dist_frm,data=quadrat,FUN=sum)
table(dat$Station,dat$Trip)
setwd("F:/MML")
mml_data<-read.csv("SDRP_prey_BP.csv")
mml_data$Year=as.factor(mml_data$Year1)
mml_data$Period1=as.factor(mml_data$Period)
mml_data2=subset(mml_data,K_brevis.mean!="NA")
library(MASS)
library(coefplot)
head(mml_data2)
str(mml_data2)
names(mml_data2)
# Aggregate data to count of all fish caught
dat=aggregate(N_fish.sum~Year+Month1+Habitat+Period1, data=mml_data2,sum)
dat$Effort=aggregate(N_fish.length~Year+Month1+Habitat+Period1, data=mml_data2,max)[,5]
#note the little trick on dat$Effort about where to insert that column
year_period=aggregate(N_fish.sum~Year+Period1, data=mml_data2,sum)
year_habitat=aggregate(N_fish.sum~Year+Habitat, data=mml_data2,sum)
# Aggregate data to count of all fish caught
dat=aggregate(N_fish.sum~Year+Month1+Habitat+Period1, data=mml_data2,sum)
dat$Effort=aggregate(N_fish.length~Year+Month1+Habitat+Period1, data=mml_data2,max)[,5]
#note the little trick on dat$Effort about where to insert that column
year_period=aggregate(N_fish.sum~Year+Period1, data=mml_data2,sum)
year_habitat=aggregate(N_fish.sum~Year+Habitat, data=mml_data2,sum)
#no year 5 period 1 b/c red tide (perioad 2) all of year 5
#not all habitats sampled in every year either...watch this
#just aggregating by the factors I'm interested in.  Can change N_fish.sum
#to other fish species.  Here just working with Year, Month, Habitat, Period
#response is total fish catch effort is the offset (controlling for variations
#in effort)
names(dat)
str(dat)
hist(dat$N_fish.sum,breaks=40,freq=FALSE,col=8)
theta=c(mu=1,k=0.2)
nb_LL=function(theta)
{
-sum(dnbinom(dat$N_fish.sum,mu=theta[1],size=theta[2],log=TRUE))
}
fit_nb=optim(theta,nb_LL)
lines(seq(0,25000,100),dnbinom(seq(0,25000,100),mu=fit_nb$par[1],size=fit_nb$par[2]),col=2)
summary(full.mod)
full.mod=glm.nb(N_fish.sum~Year+Month1+Habitat+Period1+offset(log(Effort))+0,data=dat)
summary(full.mod)
#add month to year
mod.ed.1=glm.nb(N_fish.sum~Year*Month1+offset(log(Effort))+0,data=dat)
#using the * to get main effects and intercepts.
#If you Year:Month just get intercepts, which is really different, see those way below
summary(mod.ed.1) #only Sept different
#add month to year
mod.ed.1=glm.nb(N_fish.sum~Year*Month1+offset(log(Effort))+0,data=dat)
#using the * to get main effects and intercepts.
#If you Year:Month just get intercepts, which is really different, see those way below
summary(mod.ed.1) #only Sept different
#years significant yes and only Sept is signficant
#if you were doing this with Year:Month1 would likely be all significant
#since the years are significant
#just for fun look at month only, no year
mod.ed.2=glm.nb(N_fish.sum~Month1+offset(log(Effort))+0,data=dat) #add the zero to get the effects parameterization (that way august is returned as august and not as intercept)
summary(mod.ed.2)  #can probably drop month but they are all significant so weird
plot(residuals(mod.ed.2))
abline(h=0)
#all significant but not all months sampled in each year so likely
#not informative.
#just for fun look at habitat only
mod.ed.2a=glm.nb(N_fish.sum~Habitat+offset(log(Effort))+0,data=dat) #add the zero to get the effects parameterization (that way august is returned as august and not as intercept)
summary(mod.ed.2a)  #not all habitats sampled each year
plot(residuals(mod.ed.2a))
abline(h=0)
#all significant but not all habitats sampled in each year so likely not
#informative.
#ok so try year habitat and period
mod.ed.3=glm.nb(N_fish.sum~Year*Habitat*Period1+offset(log(Effort))+0,data=dat) #add the zero to get the effects parameterization (that way august is returned as august and not as intercept)
summary(mod.ed.3)  #intercepts for redtide habitat and year across months
plot(residuals(mod.ed.3))
abline(h=0)
#Period still not significant, this is confusing not sure why year 5
#habitats aren't showing? incomplete sampling? remember redtide is not in each habitat nor is it in each
#year.  That's the bigger issue
#ok so try year and period
mod.ed.4=glm.nb(N_fish.sum~Year*Period1+offset(log(Effort))+0,data=dat) #add the zero to get the effects parameterization (that way august is returned as august and not as intercept)
summary(mod.ed.4)  #intercepts for redtide habitat and year across months
plot(residuals(mod.ed.4))
abline(h=0)
#again year significant period not
#ok so try year and month
mod.ed.5=glm.nb(N_fish.sum~Month1*Period1+offset(log(Effort))+0,data=dat) #add the zero to get the effects parameterization (that way august is returned as august and not as intercept)
summary(mod.ed.5)  #intercepts for redtide habitat and year across months
plot(residuals(mod.ed.5))
abline(h=0)
#Month and period significant,
#this could go on forever playing with different models
#need some biologically important ones to fit
#overall it looks like period only matters in some months but annual
#variation in total catch is significant
AIC(mod.ed.5,mod.ed.4, mod.ed.3, mod.ed.2, mod.ed.1, mod.ed)
###OK do this in a sequential way
mod.ed=glm.nb(N_fish.sum~Year+offset(log(Effort))+0,data=dat)
#add the zero to get the effects parameterization
#(that way august is returned as august and not as intercept)
summary(mod.ed)
# all years catch different, all years significant
#add month to year
mod.ed.1=glm.nb(N_fish.sum~Year*Month1+offset(log(Effort))+0,data=dat)
#using the * to get main effects and intercepts.
#If you Year:Month just get intercepts, which is really different, see those way below
summary(mod.ed.1) #only Sept different
#years significant yes and only Sept is signficant
#if you were doing this with Year:Month1 would likely be all significant
#since the years are significant
#just for fun look at month only, no year
mod.ed.2=glm.nb(N_fish.sum~Month1+offset(log(Effort))+0,data=dat) #add the zero to get the effects parameterization (that way august is returned as august and not as intercept)
summary(mod.ed.2)  #can probably drop month but they are all significant so weird
plot(residuals(mod.ed.2))
abline(h=0)
#all significant but not all months sampled in each year so likely
#not informative.
#just for fun look at habitat only
mod.ed.2a=glm.nb(N_fish.sum~Habitat+offset(log(Effort))+0,data=dat) #add the zero to get the effects parameterization (that way august is returned as august and not as intercept)
summary(mod.ed.2a)  #not all habitats sampled each year
plot(residuals(mod.ed.2a))
abline(h=0)
#all significant but not all habitats sampled in each year so likely not
#informative.
#ok so try year habitat and period
mod.ed.3=glm.nb(N_fish.sum~Year*Habitat*Period1+offset(log(Effort))+0,data=dat) #add the zero to get the effects parameterization (that way august is returned as august and not as intercept)
summary(mod.ed.3)  #intercepts for redtide habitat and year across months
plot(residuals(mod.ed.3))
abline(h=0)
#Period still not significant, this is confusing not sure why year 5
#habitats aren't showing? incomplete sampling? remember redtide is not in each habitat nor is it in each
#year.  That's the bigger issue
#ok so try year and period
mod.ed.4=glm.nb(N_fish.sum~Year*Period1+offset(log(Effort))+0,data=dat) #add the zero to get the effects parameterization (that way august is returned as august and not as intercept)
summary(mod.ed.4)  #intercepts for redtide habitat and year across months
plot(residuals(mod.ed.4))
abline(h=0)
#again year significant period not
#ok so try year and month
mod.ed.5=glm.nb(N_fish.sum~Month1*Period1+offset(log(Effort))+0,data=dat) #add the zero to get the effects parameterization (that way august is returned as august and not as intercept)
summary(mod.ed.5)  #intercepts for redtide habitat and year across months
plot(residuals(mod.ed.5))
abline(h=0)
#Month and period significant,
#this could go on forever playing with different models
#need some biologically important ones to fit
#overall it looks like period only matters in some months but annual
#variation in total catch is significant
#just for fun
AIC(mod.ed.5,mod.ed.4, mod.ed.3, mod.ed.2, mod.ed.1, mod.ed)
#need to remember when you have to include the main and interaction effects
#year and habitat and period with effort offset
nb_glm.year.hab.period=glm.nb(N_fish.sum~Year:Habitat:Period1+offset(log(Effort))+0,data=dat)
summary(nb_glm.year.hab.period)
coefplot(nb_glm.year.hab.period)
#year and month and Period with effort offset
nb_glm.yr_mnth_period=glm.nb(N_fish.sum~Year:Month1:Period1+offset(log(Effort))+0,data=dat)
summary(nb_glm.yr_mnth_period)
coefplot(nb_glm.yr_mnth_period)
coefplot(nb_glm.year.hab.period)
coefplot(nb_glm.year.hab.period)
#period and year
nb_glm.period=glm.nb(N_fish.sum~Year:Period1+offset(log(Effort))+0,data=dat)
summary(nb_glm.period)
coefplot(nb_glm.period)
nb_glm.period=glm.nb(N_fish.sum~Year:Period1+offset(log(Effort))+0,data=dat)
summary(nb_glm.period)
coefplot(nb_glm.period)
summary(nb_glm.period)
install.packages("sas7bdat")
setwd("C:/Users/billpine/Google Drive/GEBF Lone Cabbage Oyster/WQ/FWC_FIM")
library(sas7bdat)
hydro=read.sas7bdat("ckm_2017_hydrolab.sas7bdat")
View(hydro)
physical=read.sas7bdat("ckm_2017_physical.sas7bdat")
View(physical)
View(hydro)
View(physical)
View(hydro)
View(physical)
